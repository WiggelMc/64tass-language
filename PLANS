
let the server do everything thats not editor changes
let the client initialize everything (send file contents) thats open in the editor (maybe only incremental changes)

-----------------------------------------

incremental change processing (only needed for changes in the editor) [figure out how]


open files are stored in a map and will be ignored in fs updates

When a file is opened, the version and lines are stored (lines into array)


2 options:
    always calculate syntax highlighting (faster load when opening a file, slower indexing, more memory)
        indexing will only happen once
            

    only calculate syntax highlighting when open (slower load when opening a file, faster indexing, less memory)
        complete file will be parsed again when opened (only definitions, includes, scopes, etc are stored)


How to store data about a file [needs thinking]
how much should a textmate grammar be used (if at all)
how to implement different instruction sets
    provide different language for each processor (instant highlighting / language has to be selected somehow)
    highlight all instructions by default (instant highlighting / confusing for a second if unsupported instruction is used)
    highlight no instructions by default (not instant highlighting / no confusion)


TextMate
	data (string number boolean)
	operators (+)
	Other (* , ?)
Dynamic
	Symbols
	anonymous symbols (+)
	INSTRUCTIONS
	filepath/name
	compiler directives (.scope)
	builtin functions (ceil)

-----------------------

TODO

Find way to detect processor used (maybe use all in order)
    manual selection
    detect from source file (.cpu)
    detect from task [complicated / maybe not]
        task run
        task files
        

Test how syntax highlighting works in git/override diff

Find a way to
    Update the Semantic Highlights for a file (open file only) [found for all files]
    



maybe use codeLens
    to show information from list file next to source Code
    to show scope of a function or section
    




How can a line look???

; comment is ignored anyway

definitions[
	params:	List of (expressions|variables|assignments) (comma seperated)
	expression: Combination of operators and value types
]

[Label] .directive [params]
[Label] opcode [params]
Variable assignment_operator expression




Indexing

	File Update
		config?

	Editor Update


	Semantic Request





########################################

Stuff to investigate (implement)

############################################

selection Range			V
code action				V

document hightlight		V
(document formatting)	V
document links			V
(folding ranges)		V
linked editing range	V

rename					V
execute Command			V

definition (type definition / references) V

declaration / implementation (??????)

custom:
	list-file			V
	decorations				i (will probably not be done)

Document all handlers

	@ when called
	@ use for what


settings scopes
	window => vscode instance (workspace/user)
	resource => folder (folder/workspace/user)
	language-overridable => (folderL/workspaceL/userL / folder/workspace/user)

	probably make everything window scope
		access to finer scopes is difficult


somehow let the server know if the assembly has errors (maybe check timestamp in header and / or changed watch of list file)
for compillation assume that last any change before the list file update was compiled (might be wrong, but currently cant reproduce)

way to generate assemble task code from 64tasslang.json (possibly automatically put it in the specified assemble task) 
		[also vscode options (3x bool)[copy-menu-option insert-task-menu-option automatic-insert-task]] 
		wont override task if another 64tasslang.json specifies it already
		maybe provide assemble (and assembleAndBuild) directy (without tasks.json) [maybe optional] (might make problems with task runner)
		add additional args array to 64tasslang.json

		menu: copy run command (64tass -a -...)
		options: auto Provide Task / link existing task (might be good for makefile)

if composite task doesnt work
	still auto create process task (but auto create it in tasks.json) [everything else will be the same]

	final plans:

	copy command (menu) [start command / process task]


PathLayerMap
	can be used by FileWatcherMap and FileIndexMap (not yet implemented)
	make on listeners part of Map and not of node
	should also have a Map<string, T> for easier access (Optional) [make different implementations to ihnerit from]

language settings have to match to allow for include (how to handle common libs from)

TODO

V	organize client code
X	find read only support	(might be a deep rabbit hole)
V	find good way to run a user selectable task (and detect if an element from a list of them is run [eg. fresh compilation])
V	[some way to link the versions of assembly to files reliably (server- and client)]
.	organize server handlers into multiple folders
V	test if workspace folders support is nessessary
V	find support for jump to compile error
X	find way to remove diagnostics
.	simple indexing [at first only list of all documents]
.	workspace diagnostics support (so errors are show when if the file is not open)
V	test/ fix multi workspace support for terminal links (likely fix) and auto error jump (might work already)
.	clean up languageclient
.	enable multi workspace support for vscode settings
V	enable multi workspace support for server file watcher
.	Fix consistency issues (different ids), kebap case in settings
V	Use configuration defaults to use sensible settings for list and asm (ex. no line numbers in list)
V	Add Icons to languages (make 4 images)
.	Add Themes
.	Add Grammars
.	Add Walkthrough
.	Organize package.json
V	fix nested workspaces updating twice
.	determine behaviour for include of files (relative path or include directory) outside workspace (might be done for shared libs)
.	add error message for missing property in 64tasslang.json (+open code action [maybe create action])
.	test how include path handles backtracking out of specified paths
.	better error messages for fail states (maybe use RequestError object instead of optional to let the server send back detailed feedback)
V	determine behaviour for include of files (relative path or include directory) with different language settings (or none)
.	add icons and language support for .(raw|bin) / .(inc)
.	create general PathLayerMap
.	automatically read fileTypeAssotiations from config for DocumentSelector



Known issues:

	if the terminal is too small, errors and warnings might not be correctly parsed (vscode / Windows bug)


####################################################################################################################
####################################################################################################################
####################################################################################################################


OLD PLANS


####################################################################################################################
####################################################################################################################
####################################################################################################################


syntax highlighting
	good categorisation
	multiple color schemes
	unary / binary operator detection
	variable highlighting (only if defined)

functions labels variables macros
	goto definition
	definition popup
	type inference
		show properties of defined structs / scopes like in java 
	show structure of file in OUTLINE tab (bottom left)
	
useful autocomplete
	show adressing modes when typing instruction
	allow toggling of instruction set in options (+allow custom instruction sets)
		json files with instructions (adressing modes => cycles [notes], bytes [notes])
		adressing modes are also defined in a json file
		allow for composition of files (eg include list)
	only autocomplete defined variables, functions, etc and show type in preview bar


listing file support [Indexing the list file on change will make navigation easier]
	listing file popup
	goto line in listing file (from source)
	goto line in source (from listing file)


Show information beside code (cascading properties)
	register size

Add Breakpoint via click
	and only show breakpoint dot (hide the lines [optional])

Workspace setup command
	Will set options and directories to premade Workspace


Make every keyword and symbol configurable
	this includes order of operations and specific behavior
	this will make supporting later version easier
	old configs can be kept for lagacy support (maybe add an option)

Always assume global scope (one way) in functions macros, unused or multi included files
	a comment in the format somewhere in the file or function will assume the scope (maybe only on function definition / first line of file)
	
	; file_scope = Bank80
	; section_scope = Bank80.Main

Scope Indexing
	

CONFIG FILES:

idea 1
	SYNTAX
		64tass-1.56.2625.json
	INSTRUCTIONS
		6502.json
		65c02.json
		65ce02.json
		6502i.json
		65816.json
		65dtv02.json
		65el02.json
		r65c02.json
		w65c02.json
		4510.json


idea 2
	V1-56-2625
		syntax.json

		INSTRUCTIONS
			6502.json
			65c02.json
			65ce02.json
			6502i.json
			65816.json
			65dtv02.json
			65el02.json
			r65c02.json
			w65c02.json
			4510.json

OPTIONS:

	COMPILER:
	[9]	instruction-set: string
		case-sensitive: bool (true) (can be on, even if the command line option is off)
	[2]	tasm-compatible: bool (false)
		include-search-path: string[]
		master-file: string
		list-file: string
		assemble-task: string ("ASSEMBLE")
		

	INTERFACE:
		??


	KEYBOARD:
		viewInList
		assembleAndViewInList
		viewInSource










Properties of a single line

require [variable]
define/assign [variable]
open/close [scope]
set cascading property [register size]





Specifics

Define Variable

LABEL ADC / nothing

OBJ .byte / .word / .long / .dstruct <> / .dunion <> [is always a label too]

TYPE .struct / .union [are scopes when named, visible otherwise]

SCOPE .proc / .block / .namespace <> / .weak / .binclude  [is always a label too] [will be inaccessible if not named]
		activate scope: .with <> / .namespace <>

CONST = 
VAR :=
VAR .var
.dsection SECTION
		use section: .section

MACRO .segment / .macro
FUNCTION .function


.if / .elsif
.switch / .case

.for /.bfor / .rept / .brept / .while / .bwhile / .break /.breakif / .continue / .continueif / ...

.comment / ;


address	Address type
bits	Bit string type
bool	Boolean type
bytes	Byte string type
code	Code type
dict	Dictionary type
float	Floating point type
gap	Uninitialized memory type (? Symbol)
int	Integer type
list	List type
str	Character string type
tuple	Tuple type
type	Type type







Indexing System


FileWatcher

 AddDir 	(needs to know if dir is already tracked)
 RemoveDir  (needs to know if Dir inside is also tracked / needs to know which files inside to let go)

 OnFileChanged (from event)
 OnFileCreated (from event) [automatically check in which folders and add itself to these]
 OnFileRemoved (from event / RemoveDir)


FSS

FSSNode
	files


Index
 addFile
 getFile
 hasFile

 ???


Node

destroy, no destroy
create (add), break (get / remove)

What does the index need



Globals

handler.task.runningTasks				(local) (PUT RUNNING_TASKS INTO UTILS)
handler.terminal.errorShown				(local) (PUT INTO UTILS)

util.document-location.currentRunning	(local) (window [activeTextEditor / showTextDocument] / workspace [openTextDocument])
util.languageclient.client				(export) (everything???) [client is only used for sendRequest (possibility to replace client with Wrapper)]
util.task.taskMap						(local) (tasks [fetchTasks / onDidTaskEnd / ExecuteTask])
util.config.config						(local) (workspace [getConfiguration])

use wrapper Interfaces passed at Construction to make testing possible

handlers put logic together and also need to be tested
handlers are then registered (this is the only non testable part)

Stateful methods (need to be part of class globally instatiated)
	use global State
	use any stateful outside method (passed from constructor)

Static Methods
	dont rely on any outside and are fundamentally pure

Create Tests for all client classes and static methods




figure out workspace.createFileSystemWatcher('**/.clientrc') in languageclient




Centralise global Vars ???



Handlers



initializationHandler
> 

configurationHandler
> 

fileSystemHandler
> 

semanticTokensHandler
> 

textDocumentHandler
> 

completionHandler
> 

hoverHandler
> 

symbolHandler
> 

signatureInformationHandler
> 

monikerHandler
> 

codeLensHandler
> 

inlayHintHander
> 

inlineValueHandler
> 

selectionRangeHandler
> 

codeActionHandler
> 

documentLinkHandler
> 

listFileHandler
> 

renameHandler
> 

foldingRangeHandler
> 

executeCommandHandler
> 

linkedEditingRangeHandler
> 

documentHighlightHandler
> 

documentFormattingHandler
> 

definitionHandler
> 

diagnosticsHandler
> 

taskHandler
> 
